# -*- coding: utf-8 -*-
#
# PyClical: Python interface to GluCat:
#           Generic library of universal Clifford algebra templates
#
# pyclical_tutorial_1_1_complex.py:
#
# This file is based on the Plane Geometry section of the Tutorial from
# [LMV] Pertti Lounesto, R. Mikkola, V. Vierros,
# CLICAL Version 2.0 User Manual: Complex Number, Vector Space and
# Clifford Algebra Calculator for MS-DOS Personal Computers,
# Helsinki University of Technology Institute of Mathematics
# Research Reports A248, August 1987.
#
# Portions of [LMV] are reproduced here by permission of Aalto University, 2012.
#
#    copyright            : (C) 2012-2014 by Paul C. Leopardi
#
# Licensed under CC BY-SA 3.0 http://creativecommons.org/licenses/by-sa/3.0/

from pyclical_tutorial_utils import *

def run(ctx):
    pause      = ctx.pause
    print_line = ctx.print_line
    print_fill = ctx.print_fill
    print_exec = ctx.print_exec
    check_exec = ctx.check_exec
    check_eval = ctx.check_eval

    print_fill("# pyclical_tutorial_1_1_complex.py:")
    print_line()
    print_fill("1.1 Complex numbers")
    print_line()
    print_fill("This tutorial file contains examples which will introduce you to PyClical" +
              " and the wide range of calculations with Clifford and Grassmann algebras that" +
              " you can use PyClical to perform.")
    print_line()
    print_fill("It is recommended that you do the tutorials in order, beginning with" +
              " 0.0 Notation.")
    print_line()

    pause()
    print_line()
    print_fill("This file is based on the Plane Geometry section of the Tutorial from")
    print_fill("[LMV] Pertti Lounesto, R. Mikkola, V. Vierros,")
    print_fill("CLICAL Version 2.0 User Manual: Complex Number, Vector Space and" +
              " Clifford Algebra Calculator for MS-DOS Personal Computers,")
    print_fill("Helsinki University of Technology Institute of Mathematics" +
              " Research Reports A248, August 1987.")
    print_line()
    print_fill("Example numbers refer to [LMV], e.g. Example 10.2 is the second example" +
              " on p. 10 of [LMV].")
    print_line()
    print_exec("from PyClical import *")

    pause()
    print_line()
    print_fill("Clifford algebras contain many square roots of -1. " +
              " The simplest such algebra is generated by {-1} and is isomorphic to the complex numbers. " +
              " In this tutorial, we therefore identify i, the square root of -1 in the complex numbers," +
              " with the generator {-1}.")
    print_line()
    print_exec("i = e(-1); print(i)")

    pause()
    print_line()
    print_fill("Example 9.1. Compute the absolute value r, the square root s, and the cube t of the" +
              " complex number z = 3 + 4*i.")
    print_line()
    print_exec("z = 3+4*i; print(z)")
    print_exec("r = abs(z); print(r)")
    print_exec("s = sqrt(z); print(s)")
    print_exec("t = z ** 3; print(t)")

    pause()
    print_line()
    print_fill("Example 9.2. Compute log(1+i) and compare the result to the principal logarithm (log(2))/2 + i*pi/4.")
    print_line()
    print_exec("a = log(1+i); print(a)")
    print_exec("b = (log(2))/2 + i*pi/4; print(b)")
    print_exec("print(abs(a-b))")

    pause()
    print_line()
    print_fill("Example 9.3. Let s = exp(i*pi/5). " +
              " Find the real part and the phase angle of z = 1/(1+s).")
    print_line()
    print_exec("s = exp(i*pi/5); print(s)")
    print_exec("z = 1/(1+s); print(z)")
    print_exec("print(scalar(z))")
    print_exec("w = log(z)")
    print_exec("print(pure(w))")

    pause()
    check_eval("compare with z to check that the value of w is correct.",
               "exp(w)",
               "print(abs(z - {}))")

    pause()
    print_line()
    print_fill("Example 10.1. Solve the equation sin(z) == 1+i.")
    print_line()
    print_exec("w = asin(1+i); print(w)")
    print_line()
    print_fill("Therefore the solutions are 2*k*pi + w and (2*k+1)*pi - w.")
    print_line()
    print_exec("k = 3; print(k)")

    pause()
    check_eval("compare with 1+i to check that z == 2*k*pi + w is a solution.",
               "sin(2*k*pi + w)",
               "print(abs((1+i) - {}))")
    pause()
    check_eval("compare with 1+i to check that z == (2*k+1)*pi - w is a solution.",
               "sin((2*k+1)*pi - w)",
               "print(abs((1+i) - {}))")

    pause()
    print_line()
    print_fill("You have completed the tutorial file pyclical_tutorial_1_1_complex.py.")

if __name__ == "__main__":
    ctx = tutorial_context(globals())
    try:
        run(ctx)
    except:
        ctx.print_fill("The tutorial was interrupted.")
        pass
